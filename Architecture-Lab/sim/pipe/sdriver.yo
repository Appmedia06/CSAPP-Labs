                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4c002000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f61802000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7e801000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: c0f2fdffffffffffffff | 	iaddq $-3, %rdx     # limit -= 7
0x03e: 711201000000000000   | 	jle R0       		# if so, goto Done:
                            | 
0x047:                      | Load:
0x047: 50870000000000000000 |     mrmovq (%rdi), %r8 # read val from src...
0x051: 50970800000000000000 |     mrmovq 8(%rdi), %r9 # read val from src...
0x05b: 50a71000000000000000 |     mrmovq 16(%rdi), %r10 # read val from src...
0x065: 50b71800000000000000 |     mrmovq 24(%rdi), %r11 # read val from src...
0x06f:                      | Store:
0x06f: 40860000000000000000 |     rmmovq %r8, (%rsi) # ...and store it to dst
0x079: 40960800000000000000 |     rmmovq %r9, 8(%rsi) # ...and store it to dst
0x083: 40a61000000000000000 |     rmmovq %r10, 16(%rsi) # ...and store it to dst
0x08d: 40b61800000000000000 |     rmmovq %r11, 24(%rsi) # ...and store it to dst
0x097:                      | Loop0:	
0x097: 6288                 | 	andq %r8, %r8		# val <= 0?
0x099: 71ac00000000000000   | 	jle Loop1		# if so, goto Npos:
0x0a2: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0ac:                      | Loop1:  
0x0ac: 6299                 |     andq %r9, %r9     # val <= 0?
0x0ae: 71c100000000000000   |     jle Loop2       # if so, goto Npos:
0x0b7: c0f00100000000000000 |     iaddq $1, %rax      # count++
0x0c1:                      | Loop2:  
0x0c1: 62aa                 |     andq %r10, %r10     # val <= 0?
0x0c3: 71d600000000000000   |     jle Loop3       # if so, goto Npos:
0x0cc: c0f00100000000000000 |     iaddq $1, %rax      # count++
0x0d6:                      | Loop3:  
0x0d6: 62bb                 |     andq %r11, %r11     # val <= 0?
0x0d8: 71eb00000000000000   |     jle test        # if so, goto Npos:
0x0e1: c0f00100000000000000 |     iaddq $1, %rax      # count++
0x0eb:                      | test:	
0x0eb: c0f72000000000000000 | 	iaddq $32, %rdi		# src += 8
0x0f5: c0f62000000000000000 | 	iaddq $32, %rsi		# dst += 8
0x0ff: c0f2fcffffffffffffff |     iaddq $-4, %rdx     # len -= 8
0x109: 764700000000000000   | 	jg Load 			# if so, goto Loop:
0x112:                      | R0:
0x112: c0f20300000000000000 |     iaddq $3, %rdx
0x11c: 762e01000000000000   |     jg R00
0x125: 70e101000000000000   |     jmp Done
0x12e:                      | R00:
0x12e: 50870000000000000000 |     mrmovq (%rdi),%r8
0x138: 40860000000000000000 |     rmmovq %r8, (%rsi)
0x142: 6288                 |     andq %r8, %r8
0x144: 715701000000000000   |     jle R1
0x14d: c0f00100000000000000 |     iaddq $1,%rax
0x157:                      | R1:
0x157: c0f2ffffffffffffffff |     iaddq $-1, %rdx
0x161: 767301000000000000   |     jg R11
0x16a: 70e101000000000000   |     jmp Done
0x173:                      | R11:
0x173: 50870800000000000000 |     mrmovq 8(%rdi),%r8
0x17d: 40860800000000000000 |     rmmovq %r8, 8(%rsi)
0x187: 6288                 |     andq %r8, %r8
0x189: 719c01000000000000   |     jle R2            
0x192: c0f00100000000000000 |     iaddq $1,%rax
0x19c:                      | R2:
0x19c: c0f2ffffffffffffffff |     iaddq $-1, %rdx
0x1a6: 76b801000000000000   |     jg R22
0x1af: 70e101000000000000   |     jmp Done
0x1b8:                      | R22:
0x1b8: 50871000000000000000 |     mrmovq 16(%rdi),%r8
0x1c2: 40861000000000000000 |     rmmovq %r8, 16(%rsi)
0x1cc: 6288                 |     andq %r8, %r8
0x1ce: 71e101000000000000   |     jle Done
0x1d7: c0f00100000000000000 |     iaddq $1,%rax
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x1e1:                      | Done:
0x1e1: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x1e2:                      | End:
                            | #/* $end ncopy-ys */
0x1e2:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x1e8:                      | 	.align 8
0x1e8:                      | src:
0x1e8: 0100000000000000     | 	.quad 1
0x1f0: 0200000000000000     | 	.quad 2
0x1f8: fdffffffffffffff     | 	.quad -3
0x200: fcffffffffffffff     | 	.quad -4
0x208: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x210:                      | 	.align 16
0x210:                      | Predest:
0x210: fadebc0000000000     | 	.quad 0xbcdefa
0x218:                      | dest:
0x218: abefcd0000000000     | 	.quad 0xcdefab
0x220: abefcd0000000000     | 	.quad 0xcdefab
0x228: abefcd0000000000     | 	.quad 0xcdefab
0x230: abefcd0000000000     | 	.quad 0xcdefab
0x238:                      | Postdest:
0x238: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x240:                      | .align 8
                            | # Run time stack
0x240: 0000000000000000     | 	.quad 0
0x248: 0000000000000000     | 	.quad 0
0x250: 0000000000000000     | 	.quad 0
0x258: 0000000000000000     | 	.quad 0
0x260: 0000000000000000     | 	.quad 0
0x268: 0000000000000000     | 	.quad 0
0x270: 0000000000000000     | 	.quad 0
0x278: 0000000000000000     | 	.quad 0
0x280: 0000000000000000     | 	.quad 0
0x288: 0000000000000000     | 	.quad 0
0x290: 0000000000000000     | 	.quad 0
0x298: 0000000000000000     | 	.quad 0
0x2a0: 0000000000000000     | 	.quad 0
0x2a8: 0000000000000000     | 	.quad 0
0x2b0: 0000000000000000     | 	.quad 0
0x2b8: 0000000000000000     | 	.quad 0
                            | 
0x2c0:                      | Stack:
