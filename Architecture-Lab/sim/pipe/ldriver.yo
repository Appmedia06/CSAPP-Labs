                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f47806000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f6f803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7e801000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: c0f2fdffffffffffffff | 	iaddq $-3, %rdx     # limit -= 7
0x03e: 711201000000000000   | 	jle R0       		# if so, goto Done:
                            | 
0x047:                      | Load:
0x047: 50870000000000000000 |     mrmovq (%rdi), %r8 # read val from src...
0x051: 50970800000000000000 |     mrmovq 8(%rdi), %r9 # read val from src...
0x05b: 50a71000000000000000 |     mrmovq 16(%rdi), %r10 # read val from src...
0x065: 50b71800000000000000 |     mrmovq 24(%rdi), %r11 # read val from src...
0x06f:                      | Store:
0x06f: 40860000000000000000 |     rmmovq %r8, (%rsi) # ...and store it to dst
0x079: 40960800000000000000 |     rmmovq %r9, 8(%rsi) # ...and store it to dst
0x083: 40a61000000000000000 |     rmmovq %r10, 16(%rsi) # ...and store it to dst
0x08d: 40b61800000000000000 |     rmmovq %r11, 24(%rsi) # ...and store it to dst
0x097:                      | Loop0:	
0x097: 6288                 | 	andq %r8, %r8		# val <= 0?
0x099: 71ac00000000000000   | 	jle Loop1		# if so, goto Npos:
0x0a2: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0ac:                      | Loop1:  
0x0ac: 6299                 |     andq %r9, %r9     # val <= 0?
0x0ae: 71c100000000000000   |     jle Loop2       # if so, goto Npos:
0x0b7: c0f00100000000000000 |     iaddq $1, %rax      # count++
0x0c1:                      | Loop2:  
0x0c1: 62aa                 |     andq %r10, %r10     # val <= 0?
0x0c3: 71d600000000000000   |     jle Loop3       # if so, goto Npos:
0x0cc: c0f00100000000000000 |     iaddq $1, %rax      # count++
0x0d6:                      | Loop3:  
0x0d6: 62bb                 |     andq %r11, %r11     # val <= 0?
0x0d8: 71eb00000000000000   |     jle test        # if so, goto Npos:
0x0e1: c0f00100000000000000 |     iaddq $1, %rax      # count++
0x0eb:                      | test:	
0x0eb: c0f72000000000000000 | 	iaddq $32, %rdi		# src += 8
0x0f5: c0f62000000000000000 | 	iaddq $32, %rsi		# dst += 8
0x0ff: c0f2fcffffffffffffff |     iaddq $-4, %rdx     # len -= 8
0x109: 764700000000000000   | 	jg Load 			# if so, goto Loop:
0x112:                      | R0:
0x112: c0f20300000000000000 |     iaddq $3, %rdx
0x11c: 762e01000000000000   |     jg R00
0x125: 70e101000000000000   |     jmp Done
0x12e:                      | R00:
0x12e: 50870000000000000000 |     mrmovq (%rdi),%r8
0x138: 40860000000000000000 |     rmmovq %r8, (%rsi)
0x142: 6288                 |     andq %r8, %r8
0x144: 715701000000000000   |     jle R1
0x14d: c0f00100000000000000 |     iaddq $1,%rax
0x157:                      | R1:
0x157: c0f2ffffffffffffffff |     iaddq $-1, %rdx
0x161: 767301000000000000   |     jg R11
0x16a: 70e101000000000000   |     jmp Done
0x173:                      | R11:
0x173: 50870800000000000000 |     mrmovq 8(%rdi),%r8
0x17d: 40860800000000000000 |     rmmovq %r8, 8(%rsi)
0x187: 6288                 |     andq %r8, %r8
0x189: 719c01000000000000   |     jle R2            
0x192: c0f00100000000000000 |     iaddq $1,%rax
0x19c:                      | R2:
0x19c: c0f2ffffffffffffffff |     iaddq $-1, %rdx
0x1a6: 76b801000000000000   |     jg R22
0x1af: 70e101000000000000   |     jmp Done
0x1b8:                      | R22:
0x1b8: 50871000000000000000 |     mrmovq 16(%rdi),%r8
0x1c2: 40861000000000000000 |     rmmovq %r8, 16(%rsi)
0x1cc: 6288                 |     andq %r8, %r8
0x1ce: 71e101000000000000   |     jle Done
0x1d7: c0f00100000000000000 |     iaddq $1,%rax
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x1e1:                      | Done:
0x1e1: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x1e2:                      | End:
                            | #/* $end ncopy-ys */
0x1e2:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x1e8:                      | 	.align 8
0x1e8:                      | src:
0x1e8: ffffffffffffffff     | 	.quad -1
0x1f0: 0200000000000000     | 	.quad 2
0x1f8: 0300000000000000     | 	.quad 3
0x200: fcffffffffffffff     | 	.quad -4
0x208: fbffffffffffffff     | 	.quad -5
0x210: 0600000000000000     | 	.quad 6
0x218: 0700000000000000     | 	.quad 7
0x220: f8ffffffffffffff     | 	.quad -8
0x228: f7ffffffffffffff     | 	.quad -9
0x230: 0a00000000000000     | 	.quad 10
0x238: 0b00000000000000     | 	.quad 11
0x240: 0c00000000000000     | 	.quad 12
0x248: f3ffffffffffffff     | 	.quad -13
0x250: f2ffffffffffffff     | 	.quad -14
0x258: f1ffffffffffffff     | 	.quad -15
0x260: 1000000000000000     | 	.quad 16
0x268: 1100000000000000     | 	.quad 17
0x270: eeffffffffffffff     | 	.quad -18
0x278: 1300000000000000     | 	.quad 19
0x280: 1400000000000000     | 	.quad 20
0x288: ebffffffffffffff     | 	.quad -21
0x290: eaffffffffffffff     | 	.quad -22
0x298: e9ffffffffffffff     | 	.quad -23
0x2a0: e8ffffffffffffff     | 	.quad -24
0x2a8: 1900000000000000     | 	.quad 25
0x2b0: 1a00000000000000     | 	.quad 26
0x2b8: e5ffffffffffffff     | 	.quad -27
0x2c0: e4ffffffffffffff     | 	.quad -28
0x2c8: 1d00000000000000     | 	.quad 29
0x2d0: e2ffffffffffffff     | 	.quad -30
0x2d8: 1f00000000000000     | 	.quad 31
0x2e0: e0ffffffffffffff     | 	.quad -32
0x2e8: 2100000000000000     | 	.quad 33
0x2f0: 2200000000000000     | 	.quad 34
0x2f8: 2300000000000000     | 	.quad 35
0x300: 2400000000000000     | 	.quad 36
0x308: 2500000000000000     | 	.quad 37
0x310: daffffffffffffff     | 	.quad -38
0x318: d9ffffffffffffff     | 	.quad -39
0x320: d8ffffffffffffff     | 	.quad -40
0x328: 2900000000000000     | 	.quad 41
0x330: d6ffffffffffffff     | 	.quad -42
0x338: 2b00000000000000     | 	.quad 43
0x340: d4ffffffffffffff     | 	.quad -44
0x348: 2d00000000000000     | 	.quad 45
0x350: 2e00000000000000     | 	.quad 46
0x358: 2f00000000000000     | 	.quad 47
0x360: 3000000000000000     | 	.quad 48
0x368: cfffffffffffffff     | 	.quad -49
0x370: 3200000000000000     | 	.quad 50
0x378: 3300000000000000     | 	.quad 51
0x380: 3400000000000000     | 	.quad 52
0x388: cbffffffffffffff     | 	.quad -53
0x390: 3600000000000000     | 	.quad 54
0x398: 3700000000000000     | 	.quad 55
0x3a0: c8ffffffffffffff     | 	.quad -56
0x3a8: c7ffffffffffffff     | 	.quad -57
0x3b0: c6ffffffffffffff     | 	.quad -58
0x3b8: c5ffffffffffffff     | 	.quad -59
0x3c0: c4ffffffffffffff     | 	.quad -60
0x3c8: c3ffffffffffffff     | 	.quad -61
0x3d0: c2ffffffffffffff     | 	.quad -62
0x3d8: c1ffffffffffffff     | 	.quad -63
0x3e0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x3f0:                      | 	.align 16
0x3f0:                      | Predest:
0x3f0: fadebc0000000000     | 	.quad 0xbcdefa
0x3f8:                      | dest:
0x3f8: abefcd0000000000     | 	.quad 0xcdefab
0x400: abefcd0000000000     | 	.quad 0xcdefab
0x408: abefcd0000000000     | 	.quad 0xcdefab
0x410: abefcd0000000000     | 	.quad 0xcdefab
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0:                      | Postdest:
0x5f0: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x5f8:                      | .align 8
                            | # Run time stack
0x5f8: 0000000000000000     | 	.quad 0
0x600: 0000000000000000     | 	.quad 0
0x608: 0000000000000000     | 	.quad 0
0x610: 0000000000000000     | 	.quad 0
0x618: 0000000000000000     | 	.quad 0
0x620: 0000000000000000     | 	.quad 0
0x628: 0000000000000000     | 	.quad 0
0x630: 0000000000000000     | 	.quad 0
0x638: 0000000000000000     | 	.quad 0
0x640: 0000000000000000     | 	.quad 0
0x648: 0000000000000000     | 	.quad 0
0x650: 0000000000000000     | 	.quad 0
0x658: 0000000000000000     | 	.quad 0
0x660: 0000000000000000     | 	.quad 0
0x668: 0000000000000000     | 	.quad 0
0x670: 0000000000000000     | 	.quad 0
                            | 
0x678:                      | Stack:
