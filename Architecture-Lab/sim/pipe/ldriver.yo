                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f42808000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f6a805000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7a003000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: c0f2f9ffffffffffffff | 	iaddq $-7, %rdx     # limit -= 7
0x03e: 71b601000000000000   | 	jle R0       		# if so, goto Done:
                            | 
0x047:                      | Load:
0x047: 50870000000000000000 |     mrmovq (%rdi), %r8 # read val from src...
0x051: 50970800000000000000 |     mrmovq 8(%rdi), %r9 # read val from src...
0x05b: 50a71000000000000000 |     mrmovq 16(%rdi), %r10 # read val from src...
0x065: 50b71800000000000000 |     mrmovq 24(%rdi), %r11 # read val from src...
0x06f: 50c72000000000000000 |     mrmovq 32(%rdi), %r12 # read val from src...
0x079: 50d72800000000000000 |     mrmovq 40(%rdi), %r13 # read val from src...
0x083: 50e73000000000000000 |     mrmovq 48(%rdi), %r14 # read val from src...
0x08d: 50573800000000000000 |     mrmovq 56(%rdi), %rbp # read val from src...
0x097:                      | Store:
0x097: 40860000000000000000 |     rmmovq %r8, (%rsi) # ...and store it to dst
0x0a1: 40960800000000000000 |     rmmovq %r9, 8(%rsi) # ...and store it to dst
0x0ab: 40a61000000000000000 |     rmmovq %r10, 16(%rsi) # ...and store it to dst
0x0b5: 40b61800000000000000 |     rmmovq %r11, 24(%rsi) # ...and store it to dst
0x0bf: 40c62000000000000000 |     rmmovq %r12, 32(%rsi) # ...and store it to dst
0x0c9: 40d62800000000000000 |     rmmovq %r13, 40(%rsi) # ...and store it to dst
0x0d3: 40e63000000000000000 |     rmmovq %r14, 48(%rsi) # ...and store it to dst
0x0dd: 40563800000000000000 |     rmmovq %rbp, 56(%rsi) # ...and store it to dst
                            | 
0x0e7:                      | Loop0:	
0x0e7: 6288                 | 	andq %r8, %r8		# val <= 0?
0x0e9: 71fc00000000000000   | 	jle Loop1		# if so, goto Npos:
0x0f2: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0fc:                      | Loop1:  
0x0fc: 6299                 |     andq %r9, %r9     # val <= 0?
0x0fe: 711101000000000000   |     jle Loop2       # if so, goto Npos:
0x107: c0f00100000000000000 |     iaddq $1, %rax      # count++
0x111:                      | Loop2:  
0x111: 62aa                 |     andq %r10, %r10     # val <= 0?
0x113: 712601000000000000   |     jle Loop3       # if so, goto Npos:
0x11c: c0f00100000000000000 |     iaddq $1, %rax      # count++
0x126:                      | Loop3:  
0x126: 62bb                 |     andq %r11, %r11     # val <= 0?
0x128: 713b01000000000000   |     jle Loop4       # if so, goto Npos:
0x131: c0f00100000000000000 |     iaddq $1, %rax      # count++
0x13b:                      | Loop4:  
0x13b: 62cc                 |     andq %r12, %r12     # val <= 0?
0x13d: 715001000000000000   |     jle Loop5       # if so, goto Npos:
0x146: c0f00100000000000000 |     iaddq $1, %rax      # count++
0x150:                      | Loop5:  
0x150: 62dd                 |     andq %r13, %r13     # val <= 0?
0x152: 716501000000000000   |     jle Loop6       # if so, goto Npos:
0x15b: c0f00100000000000000 |     iaddq $1, %rax      # count++
0x165:                      | Loop6:  
0x165: 62ee                 |     andq %r14, %r14     # val <= 0?
0x167: 717a01000000000000   |     jle Loop7       # if so, goto Npos:
0x170: c0f00100000000000000 |     iaddq $1, %rax      # count++
0x17a:                      | Loop7:  
0x17a: 6255                 |     andq %rbp, %rbp     # val <= 0?
0x17c: 718f01000000000000   |     jle test            # if so, goto Npos:
0x185: c0f00100000000000000 |     iaddq $1, %rax      # count++
0x18f:                      | test:	
0x18f: c0f74000000000000000 | 	iaddq $64, %rdi		# src += 8
0x199: c0f64000000000000000 | 	iaddq $64, %rsi		# dst += 8
0x1a3: c0f2f8ffffffffffffff |     iaddq $-8, %rdx     # len -= 8
0x1ad: 764700000000000000   | 	jg Load 			# if so, goto Loop:
0x1b6:                      | R0:
0x1b6: c0f20700000000000000 |     iaddq $7, %rdx
0x1c0: 76d201000000000000   |     jg R00
0x1c9: 709903000000000000   |     jmp Done
0x1d2:                      | R00:
0x1d2: 50870000000000000000 |     mrmovq (%rdi),%r8
0x1dc: 40860000000000000000 |     rmmovq %r8, (%rsi)
0x1e6: 6288                 |     andq %r8, %r8
0x1e8: 71fb01000000000000   |     jle R1
0x1f1: c0f00100000000000000 |     iaddq $1,%rax
0x1fb:                      | R1:
0x1fb: c0f2ffffffffffffffff |     iaddq $-1, %rdx
0x205: 761702000000000000   |     jg R11
0x20e: 709903000000000000   |     jmp Done
0x217:                      | R11:
0x217: 50870800000000000000 |     mrmovq 8(%rdi),%r8
0x221: 40860800000000000000 |     rmmovq %r8, 8(%rsi)
0x22b: 6288                 |     andq %r8, %r8
0x22d: 714002000000000000   |     jle R2            
0x236: c0f00100000000000000 |     iaddq $1,%rax
0x240:                      | R2:
0x240: c0f2ffffffffffffffff |     iaddq $-1, %rdx
0x24a: 765c02000000000000   |     jg R22
0x253: 709903000000000000   |     jmp Done
0x25c:                      | R22:
0x25c: 50871000000000000000 |     mrmovq 16(%rdi),%r8
0x266: 40861000000000000000 |     rmmovq %r8, 16(%rsi)
0x270: 6288                 |     andq %r8, %r8
0x272: 718502000000000000   |     jle R3            
0x27b: c0f00100000000000000 |     iaddq $1,%rax
0x285:                      | R3:
0x285: c0f2ffffffffffffffff |     iaddq $-1, %rdx
0x28f: 76a102000000000000   |     jg R33
0x298: 709903000000000000   |     jmp Done
0x2a1:                      | R33:
0x2a1: 50871800000000000000 |     mrmovq 24(%rdi),%r8
0x2ab: 40861800000000000000 |     rmmovq %r8, 24(%rsi)
0x2b5: 6288                 |     andq %r8, %r8
0x2b7: 71ca02000000000000   |     jle R4            
0x2c0: c0f00100000000000000 |     iaddq $1,%rax
0x2ca:                      | R4:
0x2ca: c0f2ffffffffffffffff |     iaddq $-1, %rdx
0x2d4: 76e602000000000000   |     jg R44
0x2dd: 709903000000000000   |     jmp Done
0x2e6:                      | R44:
0x2e6: 50872000000000000000 |     mrmovq 32(%rdi),%r8
0x2f0: 40862000000000000000 |     rmmovq %r8, 32(%rsi)
0x2fa: 6288                 |     andq %r8, %r8
0x2fc: 710f03000000000000   |     jle R5    
0x305: c0f00100000000000000 |     iaddq $1,%rax
0x30f:                      | R5:
0x30f: c0f2ffffffffffffffff |     iaddq $-1, %rdx
0x319: 762b03000000000000   |     jg R55
0x322: 709903000000000000   |     jmp Done
0x32b:                      | R55:
0x32b: 50872800000000000000 |     mrmovq 40(%rdi),%r8
0x335: 40862800000000000000 |     rmmovq %r8, 40(%rsi)
0x33f: 6288                 |     andq %r8, %r8
0x341: 715403000000000000   |     jle R6            
0x34a: c0f00100000000000000 |     iaddq $1,%rax
0x354:                      | R6:
0x354: c0f2ffffffffffffffff |     iaddq $-1, %rdx
0x35e: 767003000000000000   |     jg R66
0x367: 709903000000000000   |     jmp Done
0x370:                      | R66:
0x370: 50873000000000000000 |     mrmovq 48(%rdi),%r8
0x37a: 40863000000000000000 |     rmmovq %r8, 48(%rsi)
0x384: 6288                 |     andq %r8, %r8
0x386: 719903000000000000   |     jle Done           
0x38f: c0f00100000000000000 |     iaddq $1,%rax
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x399:                      | Done:
0x399: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x39a:                      | End:
                            | #/* $end ncopy-ys */
0x39a:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x3a0:                      | 	.align 8
0x3a0:                      | src:
0x3a0: ffffffffffffffff     | 	.quad -1
0x3a8: 0200000000000000     | 	.quad 2
0x3b0: 0300000000000000     | 	.quad 3
0x3b8: 0400000000000000     | 	.quad 4
0x3c0: fbffffffffffffff     | 	.quad -5
0x3c8: faffffffffffffff     | 	.quad -6
0x3d0: 0700000000000000     | 	.quad 7
0x3d8: f8ffffffffffffff     | 	.quad -8
0x3e0: 0900000000000000     | 	.quad 9
0x3e8: 0a00000000000000     | 	.quad 10
0x3f0: f5ffffffffffffff     | 	.quad -11
0x3f8: f4ffffffffffffff     | 	.quad -12
0x400: 0d00000000000000     | 	.quad 13
0x408: f2ffffffffffffff     | 	.quad -14
0x410: f1ffffffffffffff     | 	.quad -15
0x418: 1000000000000000     | 	.quad 16
0x420: 1100000000000000     | 	.quad 17
0x428: eeffffffffffffff     | 	.quad -18
0x430: edffffffffffffff     | 	.quad -19
0x438: 1400000000000000     | 	.quad 20
0x440: ebffffffffffffff     | 	.quad -21
0x448: 1600000000000000     | 	.quad 22
0x450: 1700000000000000     | 	.quad 23
0x458: e8ffffffffffffff     | 	.quad -24
0x460: 1900000000000000     | 	.quad 25
0x468: 1a00000000000000     | 	.quad 26
0x470: e5ffffffffffffff     | 	.quad -27
0x478: e4ffffffffffffff     | 	.quad -28
0x480: e3ffffffffffffff     | 	.quad -29
0x488: e2ffffffffffffff     | 	.quad -30
0x490: 1f00000000000000     | 	.quad 31
0x498: e0ffffffffffffff     | 	.quad -32
0x4a0: 2100000000000000     | 	.quad 33
0x4a8: 2200000000000000     | 	.quad 34
0x4b0: 2300000000000000     | 	.quad 35
0x4b8: dcffffffffffffff     | 	.quad -36
0x4c0: 2500000000000000     | 	.quad 37
0x4c8: daffffffffffffff     | 	.quad -38
0x4d0: 2700000000000000     | 	.quad 39
0x4d8: d8ffffffffffffff     | 	.quad -40
0x4e0: d7ffffffffffffff     | 	.quad -41
0x4e8: d6ffffffffffffff     | 	.quad -42
0x4f0: d5ffffffffffffff     | 	.quad -43
0x4f8: d4ffffffffffffff     | 	.quad -44
0x500: d3ffffffffffffff     | 	.quad -45
0x508: d2ffffffffffffff     | 	.quad -46
0x510: d1ffffffffffffff     | 	.quad -47
0x518: 3000000000000000     | 	.quad 48
0x520: 3100000000000000     | 	.quad 49
0x528: ceffffffffffffff     | 	.quad -50
0x530: 3300000000000000     | 	.quad 51
0x538: 3400000000000000     | 	.quad 52
0x540: cbffffffffffffff     | 	.quad -53
0x548: caffffffffffffff     | 	.quad -54
0x550: 3700000000000000     | 	.quad 55
0x558: c8ffffffffffffff     | 	.quad -56
0x560: c7ffffffffffffff     | 	.quad -57
0x568: 3a00000000000000     | 	.quad 58
0x570: 3b00000000000000     | 	.quad 59
0x578: 3c00000000000000     | 	.quad 60
0x580: 3d00000000000000     | 	.quad 61
0x588: 3e00000000000000     | 	.quad 62
0x590: 3f00000000000000     | 	.quad 63
0x598: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x5a0:                      | 	.align 16
0x5a0:                      | Predest:
0x5a0: fadebc0000000000     | 	.quad 0xbcdefa
0x5a8:                      | dest:
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0: abefcd0000000000     | 	.quad 0xcdefab
0x6c8: abefcd0000000000     | 	.quad 0xcdefab
0x6d0: abefcd0000000000     | 	.quad 0xcdefab
0x6d8: abefcd0000000000     | 	.quad 0xcdefab
0x6e0: abefcd0000000000     | 	.quad 0xcdefab
0x6e8: abefcd0000000000     | 	.quad 0xcdefab
0x6f0: abefcd0000000000     | 	.quad 0xcdefab
0x6f8: abefcd0000000000     | 	.quad 0xcdefab
0x700: abefcd0000000000     | 	.quad 0xcdefab
0x708: abefcd0000000000     | 	.quad 0xcdefab
0x710: abefcd0000000000     | 	.quad 0xcdefab
0x718: abefcd0000000000     | 	.quad 0xcdefab
0x720: abefcd0000000000     | 	.quad 0xcdefab
0x728: abefcd0000000000     | 	.quad 0xcdefab
0x730: abefcd0000000000     | 	.quad 0xcdefab
0x738: abefcd0000000000     | 	.quad 0xcdefab
0x740: abefcd0000000000     | 	.quad 0xcdefab
0x748: abefcd0000000000     | 	.quad 0xcdefab
0x750: abefcd0000000000     | 	.quad 0xcdefab
0x758: abefcd0000000000     | 	.quad 0xcdefab
0x760: abefcd0000000000     | 	.quad 0xcdefab
0x768: abefcd0000000000     | 	.quad 0xcdefab
0x770: abefcd0000000000     | 	.quad 0xcdefab
0x778: abefcd0000000000     | 	.quad 0xcdefab
0x780: abefcd0000000000     | 	.quad 0xcdefab
0x788: abefcd0000000000     | 	.quad 0xcdefab
0x790: abefcd0000000000     | 	.quad 0xcdefab
0x798: abefcd0000000000     | 	.quad 0xcdefab
0x7a0:                      | Postdest:
0x7a0: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x7a8:                      | .align 8
                            | # Run time stack
0x7a8: 0000000000000000     | 	.quad 0
0x7b0: 0000000000000000     | 	.quad 0
0x7b8: 0000000000000000     | 	.quad 0
0x7c0: 0000000000000000     | 	.quad 0
0x7c8: 0000000000000000     | 	.quad 0
0x7d0: 0000000000000000     | 	.quad 0
0x7d8: 0000000000000000     | 	.quad 0
0x7e0: 0000000000000000     | 	.quad 0
0x7e8: 0000000000000000     | 	.quad 0
0x7f0: 0000000000000000     | 	.quad 0
0x7f8: 0000000000000000     | 	.quad 0
0x800: 0000000000000000     | 	.quad 0
0x808: 0000000000000000     | 	.quad 0
0x810: 0000000000000000     | 	.quad 0
0x818: 0000000000000000     | 	.quad 0
0x820: 0000000000000000     | 	.quad 0
                            | 
0x828:                      | Stack:
