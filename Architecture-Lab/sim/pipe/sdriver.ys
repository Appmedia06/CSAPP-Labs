#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
	iaddq $-7, %rdx     # limit -= 7
	jle R0       		# if so, goto Done:

Load:
    mrmovq (%rdi), %r8 # read val from src...
    mrmovq 8(%rdi), %r9 # read val from src...
    mrmovq 16(%rdi), %r10 # read val from src...
    mrmovq 24(%rdi), %r11 # read val from src...
    mrmovq 32(%rdi), %r12 # read val from src...
    mrmovq 40(%rdi), %r13 # read val from src...
    mrmovq 48(%rdi), %r14 # read val from src...
    mrmovq 56(%rdi), %rbp # read val from src...
Store:
    rmmovq %r8, (%rsi) # ...and store it to dst
    rmmovq %r9, 8(%rsi) # ...and store it to dst
    rmmovq %r10, 16(%rsi) # ...and store it to dst
    rmmovq %r11, 24(%rsi) # ...and store it to dst
    rmmovq %r12, 32(%rsi) # ...and store it to dst
    rmmovq %r13, 40(%rsi) # ...and store it to dst
    rmmovq %r14, 48(%rsi) # ...and store it to dst
    rmmovq %rbp, 56(%rsi) # ...and store it to dst

Loop0:	
	andq %r8, %r8		# val <= 0?
	jle Loop1		# if so, goto Npos:
	iaddq $1, %rax		# count++
Loop1:  
    andq %r9, %r9     # val <= 0?
    jle Loop2       # if so, goto Npos:
    iaddq $1, %rax      # count++
Loop2:  
    andq %r10, %r10     # val <= 0?
    jle Loop3       # if so, goto Npos:
    iaddq $1, %rax      # count++
Loop3:  
    andq %r11, %r11     # val <= 0?
    jle Loop4       # if so, goto Npos:
    iaddq $1, %rax      # count++
Loop4:  
    andq %r12, %r12     # val <= 0?
    jle Loop5       # if so, goto Npos:
    iaddq $1, %rax      # count++
Loop5:  
    andq %r13, %r13     # val <= 0?
    jle Loop6       # if so, goto Npos:
    iaddq $1, %rax      # count++
Loop6:  
    andq %r14, %r14     # val <= 0?
    jle Loop7       # if so, goto Npos:
    iaddq $1, %rax      # count++
Loop7:  
    andq %rbp, %rbp     # val <= 0?
    jle test            # if so, goto Npos:
    iaddq $1, %rax      # count++
test:	
	iaddq $64, %rdi		# src += 8
	iaddq $64, %rsi		# dst += 8
    iaddq $-8, %rdx     # len -= 8
	jg Load 			# if so, goto Loop:
R0:
    iaddq $7, %rdx
    jg R00
    jmp Done
R00:
    mrmovq (%rdi),%r8
    rmmovq %r8, (%rsi)
    andq %r8, %r8
    jle R1
    iaddq $1,%rax
R1:
    iaddq $-1, %rdx
    jg R11
    jmp Done
R11:
    mrmovq 8(%rdi),%r8
    rmmovq %r8, 8(%rsi)
    andq %r8, %r8
    jle R2            
    iaddq $1,%rax
R2:
    iaddq $-1, %rdx
    jg R22
    jmp Done
R22:
    mrmovq 16(%rdi),%r8
    rmmovq %r8, 16(%rsi)
    andq %r8, %r8
    jle R3            
    iaddq $1,%rax
R3:
    iaddq $-1, %rdx
    jg R33
    jmp Done
R33:
    mrmovq 24(%rdi),%r8
    rmmovq %r8, 24(%rsi)
    andq %r8, %r8
    jle R4            
    iaddq $1,%rax
R4:
    iaddq $-1, %rdx
    jg R44
    jmp Done
R44:
    mrmovq 32(%rdi),%r8
    rmmovq %r8, 32(%rsi)
    andq %r8, %r8
    jle R5    
    iaddq $1,%rax
R5:
    iaddq $-1, %rdx
    jg R55
    jmp Done
R55:
    mrmovq 40(%rdi),%r8
    rmmovq %r8, 40(%rsi)
    andq %r8, %r8
    jle R6            
    iaddq $1,%rax
R6:
    iaddq $-1, %rdx
    jg R66
    jmp Done
R66:
    mrmovq 48(%rdi),%r8
    rmmovq %r8, 48(%rsi)
    andq %r8, %r8
    jle Done           
    iaddq $1,%rax
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad -2
	.quad 3
	.quad 4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
